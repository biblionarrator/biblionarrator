var graphstore = require('bngraphstore'),
    g = graphstore(),
    linktypes = graphstore.config.schema.facets;

module.exports = function (input) {
    var facets = new g.HashMap();
    for (var ii = 0; ii < input.records.length; ii++) {
        if (input.records[ii].substring(0, 2) === 'v[') {
            input.records[ii] = input.records[ii].substring(2, input.records[ii].length - 1);
        }
    }
    var relfaceter = (input.faceter === 'relationship');
    if (relfaceter) {
        g.v(input.records).copySplit(g._().outE().groupCount(facets, "{it.label + '@out@' + it.inV.key.next()}"), g._().inE().groupCount(facets, "{it.label + '@in@' + it.outV.key.next()}")).fairMerge().iterate();
    } else {
        g.v(input.records).outE().groupCount(facets, "{it.label + '@out@' + it.inV.key.next()}").iterate();
    }
    var rawfacets =  facets.toJSON();
    facets = { };
    var parts, linktype;
    var edgeoptions = { };
    for (var key in rawfacets) {
        parts = key.split('@');
        linktype = linktypes[parts[0]];
        if (linktype && parts[1] === 'out' && (rawfacets[key] > 1 || rawfacets[key] >= input.records.length - 1)) {
            facets[parts[0]] = facets[parts[0]] || { label: linktype['facetlabel'], options: [ ], coverage: 0 };
            facets[parts[0]].options.push({ label: parts[2], link: encodeURIComponent(parts[2]), count: rawfacets[key], type: parts[0] });
            facets[parts[0]].coverage += rawfacets[key];
        }
        if (relfaceter) {
            edgeoptions[parts[0] + '@' + parts[1]] = edgeoptions[parts[0] + '@' + parts[1]] || { label: linktype[parts[1] + 'label'], link: encodeURIComponent(parts[1] + '[' + parts[0] + ']'), count: 0 };
            edgeoptions[parts[0] + '@' + parts[1]].count = edgeoptions[parts[0] + '@' + parts[1]].count + rawfacets[key];
        }
    }
    var relationshipfacet = { label: 'Relationships', options: [ ] };
    if (relfaceter) {
        for (var edge in edgeoptions) {
            relationshipfacet.options.push(edgeoptions[edge]);
        }
        relationshipfacet.options = relationshipfacet.options.sort(function (a, b) {
            return b.count - a.count || a.label.localeCompare(b.label);
        });
    }
    var facetarray = [ ];
    for (var facet in facets) {
        facets[facet].options = facets[facet].options.sort(function (a, b) {
            return b.count - a.count || a.label.localeCompare(b.label);
        });
        facets[facet].more = facets[facet].options.length > 8 ? facets[facet].options.length - 5 : false;
        facets[facet].coverage = Math.abs(input.records.length - facets[facet].coverage);
        if (facets[facet].options.length > 0) {
            facetarray.push(facets[facet]);
        }
    }
    facetarray.sort(function (a, b) {
        return a.coverage - b.coverage || a.options.length - b.options.length;
    });
    return { relationships: relationshipfacet, facets: facetarray, faceter: input.faceter || 'standard', count: input.count || 0 };
};

module.exports.message = 'facet';

