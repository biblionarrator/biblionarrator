#!/usr/bin/env node
// vim: set filetype=javascript:
"use strict";
var options = require('../src/lib/cmd')("Manage Biblionarrator translations\nUsage: $0 [locales]", {
        rewrite: {
            alias: 'r',
            boolean: true,
            describe: 'Rewrite translations, destroying previous strings'
        },
        prune: {
            alias: 'p',
            boolean: true,
            describe: 'Prune strings that are no longer used'
        },
        load: {
            alias: 'l',
            boolean: true,
            describe: 'Load translations from locale files into database'
        },
        merge: {
            alias: 'm',
            boolean: true,
            describe: 'Merge translations from locale files into database'
        },
        quiet: {
            alias: 'q',
            boolean: true,
            describe: 'Do not display diagnostic information'
        },
        export: {
            alias: 'x',
            boolean: true,
            describe: 'Export languages from database'
        }
    }),
    environment = require('../src/lib/environment');

var fs = require('fs'),
    path = require('path'),
    readdirp = require('readdirp'),
    extend = require('extend'),
    Q = require('q'),
    canonicalize = require('canonical-json');

var keys = { };

environment.renderer.registerHelper('t', function(i18n_key) {
    keys[i18n_key] = '';
    return '';
});

environment.renderer.registerHelper('tr', function(i18n_key, options) {
    keys[i18n_key] = options.fn ? options.fn({ record: { } }) : '';
    return '';
});

function registerBlockHelper(name) {
    environment.renderer.registerHelper(name, function (input, options) {
        if (options.fn) options.fn({ record: { } });
        if (options.inverse) options.inverse({ record: { } });
        return '';
    });
}

function registerHelper(name) {
    environment.renderer.registerHelper(name, function (input, options) {
        return '';
    });
}

var languages = options._ || [ 'en' ];
languages.push('dev');
['block', 'if', 'contentFor', 'each', 'field', 'ifsubf', 'iffield'].forEach(registerBlockHelper);
['subfstring', 'subffirst'].forEach(registerHelper);

if ((options.merge || options.load) && typeof environment.datastore.wait === 'function') {
    environment.datastore.wait(function () {
        processTemplates();
    });
} else {
    processTemplates();
}

function processTemplates() {
    var promises = [ ];
    var files = [ ];
    try {
        fs.mkdirSync(path.resolve(__dirname, '../locales'));
    } catch (e) {
        if (e.message.indexOf('EEXIST') === -1) {
            console.log("Caught and ignored error: " + e);
        }
    }
    for (var idx in environment.facets) {
        keys['config:facet.' + environment.facets[idx].facetlabel] = environment.facets[idx].facetlabel;
    }
    for (var idx in environment.facets) {
        keys['config:relationship.' + environment.facets[idx].inlabel] = environment.facets[idx].inlabel;
        keys['config:relationship.' + environment.facets[idx].outlabel] = environment.facets[idx].outlabel;
    }
    for (var idx in environment.fields) {
        keys['config:field.' + environment.fields[idx].label] = environment.fields[idx].label;
    }
    readdirp({ root: path.resolve(__dirname, '..'), fileFilter: '*.handlebars' }, function (err, res) {
        res.files.forEach(function (file) {
            if (file.path.indexOf('node_modules') === 0) return;
            files.push(file.name);
            var data = fs.readFileSync(file.fullPath, { encoding: 'utf8' });
                
            if (file.parentDir.indexOf('partials') > -1) {
                environment.renderer.registerPartial(file.path.replace('.handlebars', '').replace('views/partials/', ''), data);
            }
            environment.renderer.register(file.name, data);
        });
        files.forEach(function (file) {
            try {
                environment.renderer.render(file, { record: { } });
            } catch (e) {
                if (e.name !== 'RangeError') {
                    console.log("Caught and ignored error in " + file + ": " + e);
                }
            }
        });
        var namespaces = { };
        for (var key in keys) {
            if (typeof keys[key] === 'undefined') continue;
            var namespace = 'common';
            var parts = key.split(/:/);
            if (parts.length > 1) {
                namespace = parts[0];
                parts = parts[1].split(/\./);
            } else {
                parts = key.split(/\./);
            }
            var value = keys[key].replace(/\s+/g, ' ');
            var part;
            while ((part = parts.pop())) {
                var temp = { };
                temp[part] = value;
                value = temp;
            }
            namespaces[namespace] = namespaces[namespace] || { };
            extend(true, namespaces[namespace], value);
        }
        languages.forEach(function (language) {
            try {
                fs.mkdirSync(path.resolve(__dirname, '../locales', language));
            } catch (e) {
                if (e.message.indexOf('EEXIST') === -1) {
                    console.log("Caught and ignored error: " + e);
                }
            }
            for (namespace in namespaces) {
                var newlocale = { };
                var locale = { };
                extend(true, newlocale, namespaces[namespace]);
                try {
                    var data = fs.readFileSync(path.resolve(__dirname, '../locales', language, namespace + '.json'), { encoding: 'utf8' });
                    locale = JSON.parse(data);
                    if (options.prune) {
                        locale = recursePrune(locale, newlocale);
                    }
                } catch (e) {
                    if (e.message.indexOf('ENOENT') === -1) {
                        console.log("Caught and ignored error: " + e);
                    }
                }
                if (!options.rewrite && language !== 'dev') {
                    extend(true, newlocale, locale);
                }
                fs.writeFileSync(path.resolve(__dirname, '../locales', language, namespace + '.json'), canonicalize(newlocale, null, 4));
                if (!options.quiet) console.log('+Locale ' + language + '/' + namespace);
                var newPromise = Q.defer();
                if (options.merge && language !== 'dev') {
                    mergeFromDatastore(namespace, language, newlocale, newPromise);
                    promises.push(newPromise.promise);
                } else if (options.load || (options.merge && language === 'dev')) {
                    writeToDatastore(namespace, language, newlocale, newPromise);
                    promises.push(newPromise.promise);
                } else if (options.export && language !== 'dev') {
                    exportFromDatastore(namespace, language, newlocale, newPromise);
                    promises.push(newPromise.promise);
                }
            }
        });
        Q.all(promises).done(function () {
            process.exit();
        });
    });
}

function exportFromDatastore(namespace, language, newlocale, promise) {
    environment.datastore.get('i18next', namespace + '_' + language, function (err, locale) {
        if (locale) {
            if (options.prune) {
                locale = recursePrune(locale.resources, newlocale);
            }
            extend(true, newlocale, locale.resources);
        }
        fs.writeFile(path.resolve(__dirname, '../locales', language, namespace + '.json'), canonicalize(newlocale, null, 4), function (err) {
            promise.resolve(err);
        });
    });
}

function mergeFromDatastore(namespace, language, newlocale, promise) {
    environment.datastore.get('i18next', namespace + '_' + language, function (err, locale) {
        if (locale) {
            if (options.prune) {
                locale = recursePrune(locale.resources, newlocale);
            }
            extend(true, newlocale, locale.resources);
        }
        writeToDatastore(namespace, language, newlocale, promise);
    });
}

function writeToDatastore(namespace, language, locale, promise) {
    environment.datastore.set('i18next', namespace + '_' + language, {
        _id: namespace + '_' + language,
        resources: locale,
        lng: language,
        namespace: namespace
    }, function (err, res) {
        if (!options.quiet) console.log('+Datastore ' + language + '/' + namespace);
        promise.resolve(res);
    }, true);
}

function recursePrune(object, basis) {
    for (var key in object) {
        if (typeof object === 'object' && basis[key]) {
            object[key] = recursePrune(object[key], basis[key]);
        } else if (object.hasOwnProperty(key) && typeof basis[key] === 'undefined') {
            delete object[key];
        }
    }
    return object;
}
