#!/usr/bin/env node
// vim: set filetype=javascript:
"use strict";
var options = require('../src/lib/cmd')("Reindex Biblionarrator", {
        offset: {
            alias: 'o',
            describe: 'Offset'
        },
        number: {
            alias: 'n',
            describe: 'Number of records to reindex'
        },
        simulate: {
            alias: 's',
            boolean: true,
            describe: 'Simulate the reindex, and do not commit the transaction'
        },
        commit: {
            default: 1000,
            describe: 'Number of records per transaction'
        }
    });
var models = require('../src/models'),
    Record = models.Record,
    environment = require('../src/lib/environment'),
    graphstore = environment.graphstore,
    g = graphstore.g;

graphstore.autocommit = false;

var offset = options.offset || 0;
var end;
if (options.number && !isNaN(Number(options.number))) {
    end = offset + options.number - 1;
} else {
    end = -1;
}
var ii = 0;
var iter = g.V().order().range(offset, end).iterator();
var linklookup = { };
var linkcount = 0;

handleNextRecord(iter, ii);

function handleNextRecord(iterator, count) {
    var id;
    try {
        var v = iterator.nextSync();
        id = v.getIdSync();
        var rec = Record.findOne({ id: id });
        for (var key in rec) {
            if (rec.hasOwnProperty(key) && typeof rec[key] !== 'function' && key !== 'id' && key !== 'format' && key !== 'data' && key !== 'recordclass') {
                delete rec[key];
            }
        }
        rec.v().outE().remove();
        rec.vorder = rec.v().inE().count();
        rec.mergeIndexes();
        rec.save();
        var links = rec.getLinks();
        links.forEach(function (link) {
            linkcount++;
            var target = linklookup[link.key];
            if (typeof target === 'undefined') {
                target = Record.findOne({ key: link.key });
            }
            if (typeof target === 'undefined' && typeof link.vivify === 'object') {
                target = new Record(link.vivify);
                target.save();
            }
            if (typeof target !== 'undefined') {
                linklookup[link.key] = linklookup[link.key] || target.id;
                rec.link(link.label, target, link.properties);
            }
        });
        count++
        if (count % options.commit === 0 && count > 0) {
            commit(count);
            setTimeout(function () {
                handleNextRecord(iterator, count);
            }, 10);
        } else {
            handleNextRecord(iterator, count);
        }
    } catch (e) {
        if (e.message.indexOf('NoSuchElementException') === -1) {
            console.log('Ran into error on record ' + id + ': ' + e.message);
            console.log(e.stack);
        } else {
            commit(count);
            console.log('Reindexed ' + count + ' records with ' + linkcount + ' links');
            process.exit();
        }
    }
}

function commit(count) {
    console.log('Finished ' + count);
    if (options.simulate) {
        graphstore.getDB().rollbackSync();
    } else {
        graphstore.getDB().commitSync();
    }
}
