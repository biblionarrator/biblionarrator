#!/usr/bin/env node
// vim: set filetype=javascript:
"use strict";
var options = require('../src/lib/cmd')("Start Gremlin repl connected to Biblionarrator database"),
    GraphWrapper = require('gremlin/lib/graph-wrapper'),
    PipelineWrapper = require('gremlin/lib/pipeline-wrapper'),
    environment = require('../src/lib/environment');

var vm = require('vm'),
    graphstore = environment.graphstore,
    g = graphstore.g,
    repl = require("repl"),
    inspect = require('eyes').inspector({maxLength: false});
    //require('repl.history')(repl, './.node_history');
process.stdout.write('\n');
process.stdout.write('         \\,,,/' + '\n');
process.stdout.write('         (o o)' + '\n');
process.stdout.write('-----oOOo-(_)-oOOo-----' + '\n');

var r = repl.start({
  prompt: "biblionarrator> ",
  input: process.stdin,
  output: process.stdout,
  terminal: true,
  writer: outFunc,
  ignoreUndefined: true,
  eval: evalFunc

});

function _isObject(o) {
  return toString.call(o) === '[object Object]';
}

function outFunc(it){
    var arr, msg;
    if (it && it.toStringSync) {
        process.stdout.write('==>' + it.toStringSync() + '\n');
    } else {
        return repl.writer(it);
    }
    return '';
}

GraphWrapper.prototype.defaultcb = handleResult;

var evalGlobals = { };

function evalFunc(code, context, file, cb) {
  var err, result;
  evalGlobals = { context: context, file: file, cb: cb };

  try {
    result = vm.runInContext(code, context, file);
  } catch (e) {
    err = e;
  }
  if (err && process.domain) {
    process.domain.emit('error', err);
    process.domain.exit();
  }
  else if (!evalGlobals.async) handleResult(err, result, context, cb);
};

function handleResult(err, result) {
  if (_isObject(result) && result.constructor === PipelineWrapper) {
    var method = 'toJSON';
    if (evalGlobals.context.list) method = 'toList';
    if (evalGlobals.context.next) method = 'next'
    result[method](evalGlobals.cb);
  } else {
    evalGlobals.cb(err, result);
  }
}

r.context.g = g;
r.context.graphstore = graphstore;
r.context.inspect = inspect;
r.context.Text = g.java.import('com.thinkaurelius.titan.core.attribute.Text');
r.context.environment = environment;
r.context.models = require('../src/models');
r.context.sync = function (err, res) {
  evalGlobals.async = true;
  return handleResult;
};
Object.defineProperties(r.context, {
  "async": {
    "get": function () { evalGlobals.async = true; return handleResult; }
  }
});

r.on('exit', function () {
  console.log('Good-bye from Gremlin!');
  process.exit();
});

