#!/usr/bin/env node
// vim: set filetype=javascript:
"use strict";
var options = require('../src/lib/cmd')("Start Gremlin repl connected to Biblionarrator database"),
    environment = require('../src/lib/environment');

var vm = require('vm'),
    ElementWrapper = require('gremlin/lib/element-wrapper'),
    graphstore = environment.graphstore,
    repl = require("repl"),
    eyes = require('eyes'),
    inspect = eyes.inspector({maxLength: false, sortKeys: true});

console.log();
console.log('Welcome to the Biblionarrator shell');

var r = repl.start({
    prompt: "biblionarrator> ",
    input: process.stdin,
    output: process.stdout,
    terminal: true,
    writer: outFunc,
    ignoreUndefined: true,
    eval: evalFunc
});

function outFunc(it) {
    if (it instanceof ElementWrapper) {
        it = graphstore.gremlin.toJSONSync(it.el)[0];
    } else if (it && it.toJSONSync) {
        it = it.toJSONSync();
    } else if (it && it.toStringSync) {
        it = it.toStringSync();
    }
    inspect(it);
}

function jsonFunc(it) {
    if (it instanceof ElementWrapper) {
        it = graphstore.gremlin.toJSONSync(it.el)[0];
    } else if (it && it.toJSONSync) {
        it = it.toJSONSync();
    } else if (it && it.toStringSync) {
        it = it.toStringSync();
    }
    console.log(JSON.stringify(it, null, 4));
}

function evalFunc(code, context, file, cb) {
    var async = false;
    Object.defineProperties(context, {
        'print': {
            get: function () {
                async = true;
                return function (err, it) { context._ = it; cb(err, outFunc(it)); }
            }
        },
        'json': {
            get: function () {
                async = true;
                return function (err, it) { context._ = it; cb(err, jsonFunc(it)); }
            }
        }
    });
    try {
        var result = vm.runInContext(code, context, file);
        if (!async) cb(null, result);
    } catch (err) {
        cb(err);
    }
};

r.context.g = graphstore.g;
r.context.graphstore = graphstore;
r.context.inspect = eyes.inspector({maxLength: false});
r.context.Text = graphstore.g.java.import('com.thinkaurelius.titan.core.attribute.Text');
r.context.environment = environment;
r.context.models = require('../src/models');
r.context.print = r.context.json = true; // Dummy declaration for autocomplete

r.on('exit', function () {
  console.log('Good-bye from the Biblionarrator shell!');
  process.exit();
});

